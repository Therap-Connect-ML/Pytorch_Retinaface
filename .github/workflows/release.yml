name: Build and Attach Wheel to GitHub Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        plugins: poetry-dynamic-versioning

    - name: Load cached venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-dev

    - name: Build the package
      run: poetry build

    - name: List the built files
      run: ls dist/

    - name: Upload built wheel as artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-wheel
        path: dist/*.whl

  attach-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Ensure it only runs on tag pushes

    steps:
    - name: Download wheel artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: release-wheel
        path: ./

    - name: Get the release ID
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          const release = releases.find(r => r.tag_name === context.ref.replace('refs/tags/', ''));
          if (!release) {
            throw new Error(`Release not found for tag ${context.ref}`);
          }
          return release.id
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Attach the wheel to the GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.result }}/assets?name=${{ github.repository }}-${{ github.ref_name }}.whl
        asset_path: ./dist/*.whl
        asset_name: ${{ github.repository }}-${{ github.ref_name }}.whl
        asset_content_type: application/zip
